import tkinter as tk
import random
import os
import sys
import pygame
from tkinter import messagebox

class RussianRoulette:
    def __init__(self, root):
        self.root = root
        self.root.title("Russian Roulette")
        self.root.configure(bg="#2E2E2E")
        self.root.resizable(False, False)

        pygame.mixer.init()

        self.language = tk.StringVar(value="en")
        self.is_kid_mode = tk.BooleanVar(value=False)

        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —è–∑—ã–∫–∞
        self.language_label = tk.Label(root, text="Language:", bg="#2E2E2E", fg="#FFFFFF", font=("Arial", 10))
        self.language_label.grid(row=0, column=0, columnspan=2, pady=(10, 0))

        self.language_select = tk.OptionMenu(root, self.language, "en", "ru", command=self.update_texts)
        self.language_select.config(bg="#3C3F41", fg="#FFFFFF", font=("Arial", 10))
        self.language_select.grid(row=0, column=2, columnspan=3, pady=(10, 0))

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ (–∫–∞—Ä—Ç–æ—á–µ–∫)
        self.buttons = []
        for i in range(10):
            button = tk.Button(root, text="?", width=10, height=5,
                               bg="#3C3F41", fg="#FFFFFF",
                               activebackground="#5C5F61", activeforeground="#FFFFFF",
                               font=("Arial", 14),
                               command=lambda i=i: self.flip_card(i))
            button.grid(row=i // 5 + 1, column=i % 5, padx=10, pady=10)
            self.buttons.append(button)

        self.shuffle_cells()

        self.footer_label = tk.Label(root, text="Version 0.2 | Authors: Scody & Chel",
                                     bg="#2E2E2E", fg="#FFFFFF", font=("Arial", 10))
        self.footer_label.grid(row=4, column=0, columnspan=5, pady=(10, 0))

        # –ú–µ—Ç–∫–∞ –∏ –ø–æ–ª–∑—É–Ω–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ—Ç—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞
        self.kid_mode_label = tk.Label(root, text="Children's mode", bg="#2E2E2E", fg="#FFFFFF", font=("Arial", 10))
        self.kid_mode_label.grid(row=5, column=0, columnspan=5, pady=(10, 0))

        self.kid_mode_scale = tk.Scale(root, from_=0, to=1, orient=tk.HORIZONTAL, length=200,
                                       bg="#2E2E2E", fg="#FFFFFF", troughcolor="#5C5F61",
                                       command=self.toggle_kid_mode)
        self.kid_mode_scale.grid(row=6, column=0, columnspan=5, pady=(0, 10))

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        self.root.protocol("WM_DELETE_WINDOW", self.on_close)

    def update_texts(self, value):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞."""
        if self.language.get() == "en":
            self.root.title("Russian Roulette")
            self.footer_label.config(text="Version 0.1 | Authors: Scody & Chel")
            self.kid_mode_label.config(text="Children's mode")
        elif self.language.get() == "ru":
            self.root.title("–†—É—Å—Å–∫–∞—è –†—É–ª–µ—Ç–∫–∞")
            self.footer_label.config(text="–í–µ—Ä—Å–∏—è 0.1 | –ê–≤—Ç–æ—Ä—ã: Scody –∏ Chel")
            self.kid_mode_label.config(text="–î–µ—Ç—Å–∫–∏–π —Ä–µ–∂–∏–º")

    def toggle_kid_mode(self, value):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –¥–µ—Ç—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞."""
        self.is_kid_mode.set(int(value) == 1)

    def shuffle_cells(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∏ –æ–ø–∞—Å–Ω—ã—Ö —è—á–µ–µ–∫."""
        self.safe_cells = random.sample(range(10), 6)
        self.dangerous_cells = [i for i in range(10) if i not in self.safe_cells]

    def flip_card(self, index):
        """–ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞."""
        pygame.mixer.music.load("sounds/click.mp3")
        pygame.mixer.music.play()

        self.animate_flip(index)

    def animate_flip(self, index):
        """–ê–Ω–∏–º–∞—Ü–∏—è —Å–∂–∏–º–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏."""
        def shrink(step):
            if step <= 5:
                self.buttons[index].config(width=10 - step)
                self.root.after(50, lambda: shrink(step + 1))
            else:
                self.reveal_card(index)

        shrink(0)

    def reveal_card(self, index):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞."""
        if index in self.dangerous_cells:
            self.buttons[index].config(text="üíÄ", bg="#D32F2F", fg="#FFFFFF")
            if not self.is_kid_mode.get():
                self.shutdown_computer()
        else:
            self.buttons[index].config(text="‚úÖ", bg="#2E7D32", fg="#FFFFFF")
            self.buttons[index].config(state="disabled")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—à—ë–ª –ª–∏ –∏–≥—Ä–æ–∫ –≤—Å–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
            if all(self.buttons[i].cget('state') == 'disabled' for i in self.safe_cells):
                self.end_game()

        self.root.after(50, lambda: self.animate_grow(index))

    def animate_grow(self, index):
        """–ê–Ω–∏–º–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏."""
        def grow(step):
            if step <= 5:
                self.buttons[index].config(width=5 + step)
                self.root.after(50, lambda: grow(step + 1))

        grow(0)

    def end_game(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã –ø—Ä–∏ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–∏ –≤—Å–µ—Ö –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫."""
        messagebox.showinfo(self.get_translation("Congratulations!"), self.get_translation("You've won the game!"))
        self.root.quit()

    def get_translation(self, text):
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞."""
        translations = {
            "en": {
                "Congratulations!": "Congratulations!",
                "You've won the game!": "You've won the game!",
                "Warning": "Warning",
                "Closing the game will restart your computer. Do you want to continue?": "Do you really want to exit the game?",
                "Yes - Restart": "Yes - Restart",
                "No - Continue": "No - Continue"
            },
            "ru": {
                "Congratulations!": "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!",
                "You've won the game!": "–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –∏–≥—Ä—É!",
                "Warning": "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                "Closing the game will restart your computer. Do you want to continue?": "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã?",
                "Yes - Restart": "–î–∞ - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å",
                "No - Continue": "–ù–µ—Ç - –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
            }
        }
        return translations[self.language.get()][text]

    def shutdown_computer(self):
        """–í—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ."""
        if sys.platform == "win32":
            os.system("shutdown /s /t 1")
        elif sys.platform == "darwin":
            os.system("sudo shutdown -h now")
        elif sys.platform == "linux":
            os.system("sudo shutdown -h now")

    def on_close(self):
        """–ü–æ–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å' –∏ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É'."""
        warning_message = self.get_translation("Closing the game will restart your computer. Do you want to continue?")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        custom_dialog = tk.Toplevel(self.root)
        custom_dialog.title(self.get_translation("Warning"))
        custom_dialog.geometry("300x150")
        custom_dialog.configure(bg="#2E2E2E")
        custom_dialog.resizable(False, False)  # –ë–ª–æ–∫–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
        custom_dialog.protocol("WM_DELETE_WINDOW", lambda: None)  # –ë–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞
        
        # –¢–µ–∫—Å—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        label = tk.Label(custom_dialog, text=warning_message, bg="#2E2E2E", fg="#FFFFFF", font=("Arial", 10))
        label.pack(pady=20)
        
        # –ö–Ω–æ–ø–∫–∞ "–î–∞ - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä"
        restart_button = tk.Button(custom_dialog, text=self.get_translation("Yes - Restart"),
                                   command=lambda: [custom_dialog.destroy(), self.shutdown_computer()],
                                   bg="#D32F2F", fg="#FFFFFF", font=("Arial", 10), width=12)
        restart_button.pack(side="left", padx=10, pady=10)
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–µ—Ç - –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É"
        continue_button = tk.Button(custom_dialog, text=self.get_translation("No - Continue"),
                                    command=custom_dialog.destroy,
                                    bg="#2E7D32", fg="#FFFFFF", font=("Arial", 10), width=12)
        continue_button.pack(side="right", padx=10, pady=10)

# –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
root = tk.Tk()
root.configure(bg="#2E2E2E")

game = RussianRoulette(root)
root.mainloop()
